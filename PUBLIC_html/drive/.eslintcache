[{"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\index.js":"1","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App.js":"2","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\index.js":"3","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\intro\\index.jsx":"4","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\signup.jsx":"5","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\Admin.jsx":"6","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\intro\\Slide.jsx":"7","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\logo\\MainLogo.jsx":"8","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\preloader.jsx":"9","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\TokenChecker.jsx":"10","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\nav.jsx":"11","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\DesktopNav.jsx":"12","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\DriveImage.jsx":"13","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\middle.js":"14","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\extra.jsx":"15","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\userDetailscontext.jsx":"16","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\Left\\left.jsx":"17","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\Main.jsx":"18","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\filePath.jsx":"19","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\allFolder.jsx":"20","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\overlaysContext.js":"21","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\contextMenu.jsx":"22","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\FileOptions.jsx":"23","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\positionContextMenu.jsx":"24","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\FolderOptions.jsx":"25","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\fileAndFolderDetailscontext.jsx":"26","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\SupercontextMenu.jsx":"27","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\NewFolderMaker.jsx":"28","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\allUserDetailsContext.jsx":"29","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\selectedFolderAndFile.jsx":"30","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\SmallMessageContext.js":"31","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\Tester.js":"32","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\FolderMap.js":"33"},{"size":542,"mtime":1617038517654,"results":"34","hashOfConfig":"35"},{"size":1864,"mtime":1618665871251,"results":"36","hashOfConfig":"35"},{"size":7004,"mtime":1616828416266,"results":"37","hashOfConfig":"35"},{"size":82291,"mtime":1609864457530,"results":"38","hashOfConfig":"35"},{"size":26262,"mtime":1616947724682,"results":"39","hashOfConfig":"35"},{"size":2118,"mtime":1618645477142,"results":"40","hashOfConfig":"35"},{"size":5034,"mtime":1609257938566,"results":"41","hashOfConfig":"35"},{"size":312,"mtime":1610978115702,"results":"42","hashOfConfig":"35"},{"size":515,"mtime":1615021602187,"results":"43","hashOfConfig":"35"},{"size":2778,"mtime":1617040326349,"results":"44","hashOfConfig":"35"},{"size":214,"mtime":1615189028400,"results":"45","hashOfConfig":"35"},{"size":842,"mtime":1617087607583,"results":"46","hashOfConfig":"35"},{"size":50384,"mtime":1615189043850,"results":"47","hashOfConfig":"35"},{"size":725,"mtime":1615222648893,"results":"48","hashOfConfig":"35"},{"size":828,"mtime":1618315186479,"results":"49","hashOfConfig":"35"},{"size":356,"mtime":1615269827692,"results":"50","hashOfConfig":"35"},{"size":1975,"mtime":1617087856285,"results":"51","hashOfConfig":"35"},{"size":2671,"mtime":1618667423844,"results":"52","hashOfConfig":"35"},{"size":540,"mtime":1617087290377,"results":"53","hashOfConfig":"35"},{"size":16401,"mtime":1618882265377,"results":"54","hashOfConfig":"35"},{"size":502,"mtime":1618648960154,"results":"55","hashOfConfig":"35"},{"size":1756,"mtime":1618880862925,"results":"56","hashOfConfig":"35"},{"size":717,"mtime":1616773297768,"results":"57","hashOfConfig":"35"},{"size":1484,"mtime":1616770887368,"results":"58","hashOfConfig":"35"},{"size":2599,"mtime":1619110210967,"results":"59","hashOfConfig":"35"},{"size":4745,"mtime":1618669141965,"results":"60","hashOfConfig":"35"},{"size":1251,"mtime":1618648325387,"results":"61","hashOfConfig":"35"},{"size":4157,"mtime":1618669026596,"results":"62","hashOfConfig":"35"},{"size":1137,"mtime":1619099540582,"results":"63","hashOfConfig":"35"},{"size":386,"mtime":1617721621515,"results":"64","hashOfConfig":"35"},{"size":444,"mtime":1618668964231,"results":"65","hashOfConfig":"35"},{"size":509,"mtime":1618730564328,"results":"66","hashOfConfig":"35"},{"size":12186,"mtime":1618904495361,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"13691c",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\index.js",[],["142","143"],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App.js",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\index.js",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\intro\\index.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\signup.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\Admin.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\intro\\Slide.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\logo\\MainLogo.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\preloader.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\TokenChecker.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\nav.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\DesktopNav.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\DriveImage.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\middle.js",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\extra.jsx",["144","145"],"import \"./extra.scss\";\r\nimport React, { useContext,useState } from 'react';\r\nimport { userDatacontext } from \"./userDetailscontext\";\r\nexport default function Extra() {\r\n  // const userData = useContext(userDatacontext).userData;\r\n  // const setUserData = useContext(userDatacontext).setUserData;\r\n  const {userData , setUserData} = useContext(userDatacontext)\r\n  // console.log(\"context : \" +userData.userData.firstName);\r\n \r\n//  const timeout =  setTimeout(() =>{\r\n//     setUserData({firstName: \"C\"});\r\n//   },3000);\r\n  // console.log(userData);\r\n  // return () => clearTimeout(timeout);\r\n  return (\r\n    <>\r\n      \r\n      <div className=\"user\">\r\n        <div className=\"circle\">\r\n          <div className=\"letter\">\r\n            <h1>{userData.firstName}</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\nav\\userDetailscontext.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\Left\\left.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\Main.jsx",["146","147","148","149"],"import FilePath from \"./filePath\";\r\nimport AllFolder from \"./allFolder\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport \"./Main.scss\";\r\n// import {FileAndFolderContext} from \"./fileAndFolderDetailscontext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { FileAndFolderContext } from \"./fileAndFolderDetailscontext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// import {SelectedFolderFileProvider} from \"./selectedFolderAndFile\"\r\nexport default function Main(props) {\r\n  \r\n  const [pathArray, updatePathArray] = useState();\r\n  let { details } = useParams();\r\n\r\n  const [param, updateParam] = useState({ c: null, p: \"\", firsTime: false });\r\n\r\n  const { path } = useContext(FileAndFolderContext);\r\n  // let updatePath;\r\n  useEffect(() => {\r\n    \r\n\r\n    const [paths, updatePaths] = path;\r\n    \r\n\r\n    function arrayEquals(a, b) {\r\n      return (\r\n        Array.isArray(a) &&\r\n        Array.isArray(b) &&\r\n        a.length === b.length &&\r\n        a.every((val, index) => val === b[index])\r\n      );\r\n    }\r\n\r\n    if (typeof details === \"undefined\") {\r\n      details  = \"id=11234path=current_folder_foroot\"\r\n    }\r\n      const pattern = /^id=[0-9]+path=[a-zA-Z0-9_]{0,}$/;\r\n      if (details.match(pattern)) {\r\n        \r\n        let paramDetails = details.split(\"id=\");\r\n        paramDetails = paramDetails[1].split(\"path=\");\r\n\r\n        const pathsArray = paramDetails[1].split(\"_\");\r\n        console.log(\"paths Array\");\r\n        console.log(pathsArray);\r\n\r\n        if (param.c !== details) {\r\n          updateParam((prev) => {\r\n            return {\r\n              ...prev,\r\n              c: details,\r\n              firsTime: true,\r\n            };\r\n          });\r\n        } else {\r\n          //  updateParam((prev)=>{\r\n          //   return{\r\n          //     ...prev,\r\n          //     firsTime:false\r\n          //   }\r\n          // })\r\n        }\r\n        if (param.firsTime) {\r\n          updateParam((prev) => {\r\n            return {\r\n              ...prev,\r\n              // c:details,\r\n              firsTime: false,\r\n            };\r\n          });\r\n          updatePaths({ current: pathsArray, prev: pathArray });\r\n        } else {\r\n          updatePaths({ current: pathsArray, prev: paths.prev });\r\n        }\r\n      } else {\r\n        console.log(\"not matched\");\r\n      }\r\n    \r\n    // else {\r\n    //   updatePaths({\r\n    //     current: [\"current\", \"folder\", \"foroot\"],\r\n    //     prev: paths.prev,\r\n    //   });\r\n    // }\r\n    console.log(FileAndFolderContext);\r\n    // }\r\n  }, [param, details]);\r\n  return (\r\n    <>\r\n      <section className=\"main\">\r\n        <FilePath />\r\n        <AllFolder />\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\filePath.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\allFolder.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\overlaysContext.js",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\contextMenu.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\FileOptions.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\positionContextMenu.jsx",[],["150","151"],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\FolderOptions.jsx",["152","153"],"import { useRef, useState, useLayoutEffect, useContext } from \"react\";\r\nimport positionContextMenu from \"./positionContextMenu\";\r\nimport { SelectedFolderFile } from \"./../FileDisplayComponents/selectedFolderAndFile\";\r\nimport axios from \"axios\";\r\nimport { allUserDetailsContexts } from \"./../allUserDetailsContext\";\r\nimport { FileAndFolderContext } from \"./../FileDisplayComponents/fileAndFolderDetailscontext\";\r\n\r\n/**\r\n * Create an Axios api with defaults\r\n */\r\n\r\nexport default function FolderOptions(props) {\r\n  const container = useRef(null);\r\n  const [style, UStyle] = useState({\r\n    marginLeft: props.mouseX,\r\n    marginTop: props.mouseY,\r\n    position: \"absolute\",\r\n  });\r\n  useLayoutEffect(() => {\r\n    positionContextMenu(props, container, UStyle);\r\n  }, [props]);\r\n  const { selected } = useContext(SelectedFolderFile);\r\n  const { userTOKEN, deleteFolderFileApi } = useContext(allUserDetailsContexts);\r\n  const { RequiredOnesFileAndFolder, fileAndFolder } = useContext(\r\n    FileAndFolderContext\r\n  );\r\n  const [requiredFileAndFolder] = RequiredOnesFileAndFolder;\r\n  const [, changeFileAndFolderData] = fileAndFolder;\r\n  const deletes = (e) => {\r\n    e.stopPropagation();\r\n    let sendingArray = { folder: [], file: [] };\r\n    // for Folder\r\n    for (let index = 0; index < selected.folder.length; index++) {\r\n      let element = selected.folder[index];\r\n      element = \"fo\" + parseInt(element);\r\n      let fo =\r\n        RequiredOnesFileAndFolder[0].current.folder[element][0].folderPath;\r\n      sendingArray = {\r\n        folder: [...sendingArray.folder, fo],\r\n        file: [...sendingArray.file],\r\n      };\r\n    }\r\n    console.log(sendingArray);\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"binFolderArray\", sendingArray);\r\n    formData.append(\"userToken\", userTOKEN);\r\n    const config = {\r\n      method: \"POST\",\r\n      url: deleteFolderFileApi,\r\n      data: {\r\n        binFolderArray: sendingArray,\r\n        userToken: userTOKEN,\r\n      },\r\n    };\r\n    const d = {\r\n      binFolderArray: sendingArray,\r\n        userToken: userTOKEN,\r\n    }\r\n    console.log(JSON.stringify(d));\r\n    const apiCall = async () => {\r\n      try {\r\n        const req = await axios(config);\r\n        const res = req.data;\r\n        console.log(res);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    apiCall();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fileOptions\" style={style} ref={container}>\r\n        <ul>\r\n          <li>Renames</li>\r\n          <li onClick={deletes}>Delete</li>\r\n          <li>Move</li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\fileAndFolderDetailscontext.jsx",["154","155","156"],"import React, {\r\n  useState,\r\n  createContext,\r\n  useLayoutEffect,\r\n  useEffect,\r\n  useContext,\r\n} from \"react\";\r\nimport axios from \"axios\";\r\nimport { SmallMessageContext } from \"./SmallMessageContext\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nexport const FileAndFolderContext = createContext();\r\nexport const FileAndFolderContextProvider = ({ children }) => {\r\n  const apiURL =\r\n    \"http://localhost/GoogleDrive/PUBLIC_html/phpBakend/fileAndFolderList.php\";\r\n  const { message, setMessage } = useContext(SmallMessageContext);\r\n\r\n  const [fileAndFolderData, changeFileAndFolderData] = useState(() => {\r\n    return {\r\n      loading: true,\r\n      size: 500,\r\n      count: 1,\r\n      // file: [],\r\n      // folder: { foroot: {} },\r\n      current: {\r\n        file: [],\r\n        folder: {},\r\n      },\r\n      prev: {\r\n        file: [],\r\n        folder: {},\r\n      },\r\n    };\r\n  });\r\n  const [path, updatePath] = useState(() => {\r\n    return { current: [\"current\", \"folder\", \"foroot\"], prev: [] };\r\n  });\r\n  const [requiredFileAndFolder, updateRequiredFileAndFolder] = useState(() => {\r\n    return {\r\n      previous: { file: [], folder: [] },\r\n      current: { file: [], folder: [] },\r\n      // currentFolderId: 0,\r\n    };\r\n  });\r\n  // let redirect = false;\r\n  const [isRedirect, updateRedirect] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (fileAndFolderData.count === 1) return;\r\n\r\n    let folder = fileAndFolderData;\r\n    let found = true;\r\n    for (let i = 0; i < path.current.length; i++) {\r\n      if (typeof folder === \"object\") {\r\n        folder = folder[path.current[i]];\r\n      } else {\r\n        found = false;\r\n        updateRedirect(true);\r\n      }\r\n    }\r\n    if (typeof folder === \"undefined\") {\r\n      updateRedirect(true);\r\n      return;\r\n    }\r\n    // const OPath = [\"folder\", \"foroot\"];\r\n    function arrayEquals(a, b) {\r\n      return (\r\n        Array.isArray(a) &&\r\n        Array.isArray(b) &&\r\n        a.length === b.length &&\r\n        a.every((val, index) => val === b[index])\r\n      );\r\n    }\r\n    if (\r\n      arrayEquals(path.current, path.prev)\r\n      //  || Object.keys(requiredFileAndFolder.current.folder).length === 0\r\n    ) {\r\n      updateRequiredFileAndFolder((prev) => {\r\n        return {\r\n          // ...prev,\r\n          previous: { file: fileAndFolderData.file, folder: folder },\r\n          current: { file: fileAndFolderData.file, folder: folder },\r\n        };\r\n      });\r\n    } else {\r\n      updateRequiredFileAndFolder((prev) => {\r\n        return {\r\n          ...prev,\r\n          previous: { ...prev.current },\r\n          current: { file: fileAndFolderData.file, folder: folder },\r\n        };\r\n      });\r\n    }\r\n  }, [fileAndFolderData, path]);\r\n\r\n  const name = \"fileAndFolderList\";\r\n  useEffect(() => {\r\n    if (fileAndFolderData.loading === true) {\r\n      const ApiCall = async () => {\r\n        let formData = new FormData();\r\n        formData.append(\"name\", name);\r\n\r\n        try {\r\n          const config = {\r\n            method: \"POST\",\r\n            url: apiURL,\r\n            data: formData,\r\n            // timeout: 4000,\r\n          };\r\n          const request = await axios(config);\r\n          const Response = request.data;\r\n          console.log(Response);\r\n          changeFileAndFolderData((prev) => {\r\n            return {\r\n              // ...prev,\r\n              loading: false,\r\n              current: {\r\n                file: Response.file,\r\n                folder: Response.folder,\r\n              },\r\n              count: fileAndFolderData.count + 1,\r\n              prev: {\r\n                // ...prev.current\r\n                file: {},\r\n                folder: {},\r\n              },\r\n              size: Response.size,\r\n              // fetched: true,\r\n            };\r\n          });\r\n          if (message.display === \"flex\" && message.type === \"newFolderMaker\") {\r\n            setMessage({ display: \"flex\" ,message:\"New Folder HighLighted\",type:null});\r\n\r\n          }\r\n        } catch (error) {\r\n          console.log(JSON.stringify(JSON.parse(error)));\r\n        }\r\n      };\r\n      ApiCall();\r\n    }\r\n  }, [fileAndFolderData.loading]);\r\n\r\n  useEffect(() => {\r\n    if (isRedirect) {\r\n      updateRedirect(false);\r\n      updatePath({ current: [\"current\", \"folder\", \"foroot\"], prev: [] });\r\n    }\r\n  }, [isRedirect]);\r\n  if (isRedirect) {\r\n    return <Redirect to=\"/Storage/Admin/\" />;\r\n  }\r\n\r\n  return (\r\n    <FileAndFolderContext.Provider\r\n      value={{\r\n        fileAndFolder: [fileAndFolderData, changeFileAndFolderData],\r\n        RequiredOnesFileAndFolder: [\r\n          requiredFileAndFolder,\r\n          updateRequiredFileAndFolder,\r\n        ],\r\n        path: [path, updatePath],\r\n      }}\r\n    >\r\n      {children}\r\n    </FileAndFolderContext.Provider>\r\n  );\r\n};\r\n","C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\SupercontextMenu.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\ContextMenuContainer\\NewFolderMaker.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\allUserDetailsContext.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\selectedFolderAndFile.jsx",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\SmallMessageContext.js",[],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\Tester.js",[],["157","158"],"C:\\xampp\\htdocs\\GoogleDrive\\PUBLIC_html\\drive\\src\\App\\storage\\admin\\FileDisplayComponents\\FolderMap.js",["159"],"import React, { useContext } from \"react\";\r\nimport FolderIcon from \"@material-ui/icons/Folder\";\r\nimport { SelectedFolderFile } from \"./../FileDisplayComponents/selectedFolderAndFile\";\r\nimport { FileAndFolderContext } from \"./fileAndFolderDetailscontext\";\r\n// import InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\r\nimport { SetOverlayContext } from \"../ContextMenuContainer/overlaysContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst FolderMap = ({ data }) => {\r\n  // const [count, setCount] = React.useState(1);\r\n  const foldersRef = React.useRef(null);\r\n  const history = useHistory();\r\n  const { fileAndFolder, RequiredOnesFileAndFolder } = useContext(\r\n    FileAndFolderContext\r\n  );\r\n  const [requiredFileAndFolder] = RequiredOnesFileAndFolder;\r\n  let previousFolders = requiredFileAndFolder.previous.folder;\r\n  const { selected, updateSelected } = React.useContext(SelectedFolderFile);\r\n  let folders = React.useMemo(() => {\r\n    return requiredFileAndFolder.current.folder;\r\n  }, [requiredFileAndFolder]);\r\n  let FolderArray = [],\r\n    PFolderArray = undefined;\r\n  let NpreviousFolders = [];\r\n  function dataS() {\r\n    if (previousFolders != null && typeof previousFolders !== \"undefined\") {\r\n      previousFolders = Object.values(previousFolders)\r\n        .slice(0, 0)\r\n        .concat(\r\n          Object.values(previousFolders).slice(\r\n            0 + 1,\r\n            Object.values(previousFolders).length\r\n          )\r\n        );\r\n    }\r\n\r\n    if (Array.isArray(previousFolders)) {\r\n      previousFolders.forEach((el) => {\r\n        NpreviousFolders = [...NpreviousFolders, el[0]];\r\n      });\r\n    }\r\n    if (folders != null) {\r\n      PFolderArray = Object.values(folders)\r\n        .slice(0, 0)\r\n        .concat(\r\n          Object.values(folders).slice(0 + 1, Object.values(folders).length)\r\n        );\r\n    }\r\n    if (Array.isArray(PFolderArray)) {\r\n      PFolderArray.forEach((el) => {\r\n        FolderArray = [...FolderArray, el[0]];\r\n      });\r\n    }\r\n  }\r\n  dataS();\r\n  const { SetOverlays } = useContext(SetOverlayContext);\r\n  let posX = 0;\r\n  let posY = 0;\r\n  let offsetTop = 0,\r\n    offsetLeft = 0;\r\n  function getMousePosition(e) {\r\n    let AllFolderRefs = null;\r\n    if (foldersRef != null) {\r\n      AllFolderRefs = foldersRef.current.parentElement.parentElement;\r\n    }\r\n    if (AllFolderRefs != null) {\r\n      offsetTop = AllFolderRefs.getBoundingClientRect().y - 5;\r\n      offsetLeft = AllFolderRefs.getBoundingClientRect().x - 15;\r\n    }\r\n    if (e.pageX || e.pageY) {\r\n      posX = e.pageX - offsetLeft;\r\n      posY = e.pageY - offsetTop;\r\n    } else if (e.clientX || e.clientY) {\r\n      posX =\r\n        e.clientX +\r\n        document.body.scrollLeft +\r\n        document.documentElement.scrollLeft -\r\n        offsetLeft;\r\n      posY =\r\n        e.clientY +\r\n        document.body.scrollTop +\r\n        document.documentElement.scrollTop -\r\n        offsetTop;\r\n    }\r\n  }\r\n  let divHeight = null,\r\n    divWidth = null;\r\n  function MainContainerHeightWidth() {\r\n    let AllFolderRefs = null;\r\n    if (foldersRef != null) {\r\n      AllFolderRefs = foldersRef.current.parentElement.parentElement;\r\n    }\r\n    if (AllFolderRefs != null) {\r\n      // if (AllFolderRefs.current == null) return;\r\n      divHeight = AllFolderRefs.clientHeight;\r\n      divWidth = AllFolderRefs.clientWidth;\r\n    }\r\n  }\r\n  const showFolderOptions = (e, key) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    getMousePosition(e);\r\n    MainContainerHeightWidth();\r\n    SetOverlays((prev) => {\r\n      return {\r\n        visibility: \"visible\",\r\n        type: \"folder\",\r\n        mouseX: posX,\r\n        mouseY: posY,\r\n        divHeight: divHeight,\r\n        divWidth: divWidth,\r\n      };\r\n    });\r\n    // alert(selected.folder.toString());\r\n    if(selectedRef.current.folder.length > 1){\r\n      return;\r\n\r\n    }\r\n    updateSelected((prev) => {\r\n      return { folder: [key.toString()], file: [] };\r\n    });\r\n  };\r\n  function openRecentFolder(e, key) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    let needArray = folders[\"fo\" + key.toString()][0].folderPathSequence;\r\n    let carryArray = [];\r\n    needArray.forEach((element) => {\r\n      let newEl = \"fo\" + element.toString();\r\n      carryArray.push(newEl);\r\n    });\r\n    needArray = carryArray;\r\n    needArray.unshift(\"current\", \"folder\");\r\n\r\n    let path = needArray.join(\"_\");\r\n    // /Storage/Admin/folder/id=11234path=current_folder_foroot\r\n    path = \"/Storage/Admin/folder/id=\" + key.toString() + \"path=\" + path;\r\n    history.push(path);\r\n  }\r\n\r\n  // new answer:\r\n  const pressedKeys = React.useRef([]);\r\n  const selectedRef = React.useRef([]);\r\n  React.useEffect(() => {\r\n    function handleKeydownEvent(event) {\r\n      // event.preventDefault();\r\n      // event.stopPropagation();\r\n\r\n      const { keyCode } = event;\r\n\r\n      if (pressedKeys.current.includes(keyCode)) return;\r\n      pressedKeys.current = [...pressedKeys.current, keyCode];\r\n    }\r\n    function handleKeyupEvent(event) {\r\n      event.preventDefault();\r\n      pressedKeys.current = [];\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleKeydownEvent);\r\n    window.addEventListener(\"keyup\", handleKeyupEvent);\r\n    selectedRef.current = selected;\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeydownEvent);\r\n      window.removeEventListener(\"keyup\", handleKeyupEvent);\r\n    };\r\n  });\r\n\r\n  function folderClick(e, id) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    SetOverlays((prev) => {\r\n      return {\r\n        visibility: \"hidden\",\r\n      };\r\n    });\r\n\r\n    if (e.shiftKey) {\r\n      updateSelected((prev) => {\r\n        return {\r\n          folder: [...prev.folder, id.toString()],\r\n          file: prev.file,\r\n        };\r\n      });\r\n    } else if (\r\n      pressedKeys.current.length === 1 &&\r\n      pressedKeys.current[0] === 17\r\n    ) {\r\n      let CI = null;\r\n      for (let index = 0; index < FolderArray.length; index++) {\r\n        if (\r\n          selectedRef.current.folder.includes(\r\n            FolderArray[index].folderid.toString()\r\n          )\r\n        ) {\r\n          if (CI == null) {\r\n            CI = index;\r\n          } else {\r\n            if (CI > index) {\r\n              CI = index;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (CI == null) {\r\n        CI = 0;\r\n      }\r\n\r\n      let firstIndex = CI;\r\n      let lastIndex = 0;\r\n      for (let index = 0; index < FolderArray.length; index++) {\r\n        const element = FolderArray[index].folderid;\r\n        if (element === id) {\r\n          lastIndex = index;\r\n        }\r\n      }\r\n      let CA = [];\r\n      for (let index = 0; index < FolderArray.length; index++) {\r\n        const element = FolderArray[index].folderid;\r\n        if (index >= firstIndex && index <= lastIndex) {\r\n          CA = [...CA, element.toString()];\r\n        }\r\n      }\r\n      updateSelected((prev) => {\r\n        return { folder: CA, file: selected.file };\r\n      });\r\n    } else {\r\n      updateSelected((prev) => {\r\n        return { folder: [id.toString()], file: [] };\r\n      });\r\n    }\r\n  }\r\n  const FolderMap = ({ id, style, name }) => {\r\n    return (\r\n      <div\r\n        className=\"Folder\"\r\n        // extra={props.extra}\r\n        id={id}\r\n        onContextMenu={(e) => {\r\n          showFolderOptions(e, id);\r\n        }}\r\n        onDoubleClick={(e) => {\r\n          openRecentFolder(e, id);\r\n        }}\r\n        onClick={(e) => {\r\n          folderClick(e, id);\r\n        }}\r\n        selected-div=\"false\"\r\n        style={style}\r\n        // ref = {childRef}\r\n      >\r\n        <div className=\"star\">\r\n          <StarBorderIcon />\r\n        </div>\r\n        <div className=\"preview\">\r\n          <FolderIcon />\r\n        </div>\r\n        <div className=\"name\">{name}</div>\r\n      </div>\r\n    );\r\n  };\r\n  React.useLayoutEffect(() => {\r\n    const AfterApiCall = (\r\n      previousFolders,\r\n      FolderArray,\r\n      type,\r\n      foldersRef,\r\n      NpreviousFolders\r\n    ) => {\r\n      if (\r\n        typeof previousFolders !== \"undefined\" &&\r\n        previousFolders !== null &&\r\n        typeof foldersRef !== \"undefined\" &&\r\n        typeof type !== \"undefined\" &&\r\n        typeof FolderArray !== \"undefined\" &&\r\n        // folders !== null &&\r\n        typeof NpreviousFolders !== \"undefined\" &&\r\n        FolderArray !== NpreviousFolders\r\n      ) {\r\n        if (previousFolders.length === 0 && fileAndFolder[0].count < 3) return;\r\n        let newFolder = [];\r\n        let NNpreviousFolders = [];\r\n        let NFolderArray = [];\r\n        if (Array.isArray(FolderArray) && Array.isArray(NpreviousFolders)) {\r\n          FolderArray.forEach((elem) => {\r\n            NFolderArray = [...NFolderArray, JSON.stringify(elem)];\r\n          });\r\n\r\n          NpreviousFolders.forEach((elem) => {\r\n            NNpreviousFolders = [...NNpreviousFolders, JSON.stringify(elem)];\r\n          });\r\n          var difference = NFolderArray.filter(\r\n            (x) => !NNpreviousFolders.includes(x)\r\n          );\r\n          if (Object.entries(difference).length > 0) {\r\n            difference.forEach((el) => {\r\n              newFolder = [...newFolder, JSON.parse(el).folderid.toString()];\r\n            });\r\n          }\r\n        }\r\n        if (type === \"folder\") {\r\n          if (newFolder !== []) {\r\n            updateSelected((prev) => {\r\n              return { folder: newFolder, file: [] };\r\n            });\r\n          }\r\n        }\r\n\r\n        if (newFolder !== [] && FolderArray !== []) {\r\n          FolderArray.forEach((e) => {\r\n            if (e.folderid.toString() === newFolder[0]) {\r\n              let el = JSON.stringify(e);\r\n              if (NFolderArray.includes(el)) {\r\n                let node = NFolderArray.indexOf(el);\r\n                if (foldersRef !== null) {\r\n                  if (foldersRef.current === null) return;\r\n\r\n                  if (typeof foldersRef.current.children[node] === \"undefined\")\r\n                    return;\r\n                  const folderC = foldersRef.current.children[node];\r\n                  const sectionC = foldersRef.current.parentElement;\r\n                  if (\r\n                    // sectionC.scrollTop === true &&\r\n                    folderC.offsetTop &&\r\n                    sectionC.offsetHeight &&\r\n                    folderC.offsetHeight\r\n                  ) {\r\n                    sectionC.scrollTop =\r\n                      folderC.offsetTop -\r\n                      sectionC.offsetHeight +\r\n                      folderC.offsetHeight;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    };\r\n    AfterApiCall(\r\n      previousFolders,\r\n      FolderArray,\r\n      \"folder\",\r\n      foldersRef,\r\n      NpreviousFolders\r\n    );\r\n  }, [requiredFileAndFolder]);\r\n  React.useLayoutEffect(() => {\r\n    if (selected.folder === []) return;\r\n    if (foldersRef == null) return;\r\n    if (typeof foldersRef.current.children !== \"object\") return;\r\n    for (let i = 0; i < FolderArray.length; i++) {\r\n      const element = FolderArray[i];\r\n      if (selected.folder.includes(element.folderid.toString())) {\r\n        foldersRef.current.children[i].style.backgroundColor = \"#00ff7d\";\r\n        foldersRef.current.children[i].style.border = \"5px solid #0300ff\";\r\n      } else {\r\n        foldersRef.current.children[i].style.backgroundColor = \"#e5d2f8ed\";\r\n        foldersRef.current.children[i].style.border = null;\r\n      }\r\n    }\r\n  });\r\n  const b = React.useMemo(() => {\r\n    if (data.length === 0) {\r\n      return (\r\n        <>\r\n          <h1>No Folder</h1>\r\n        </>\r\n      );\r\n    }\r\n    const c = data.slice(0, 5000).map((value) => {\r\n      let s = {};\r\n      let style = s;\r\n      return (\r\n        <FolderMap\r\n          style={style}\r\n          name={value.folderName}\r\n          key={value.folderid}\r\n          id={value.folderid}\r\n        />\r\n      );\r\n    });\r\n    return c;\r\n  }, [data]);\r\n  return (\r\n    <>\r\n      {/* <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        Click {count}\r\n      </button> */}\r\n      <div className=\"folders\" ref={foldersRef}>\r\n        {b}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// );\r\nexport default FolderMap;\r\n",{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":2,"column":28,"nodeType":"166","messageId":"167","endLine":2,"endColumn":36},{"ruleId":"164","severity":1,"message":"168","line":7,"column":21,"nodeType":"166","messageId":"167","endLine":7,"endColumn":32},{"ruleId":"164","severity":1,"message":"169","line":8,"column":10,"nodeType":"166","messageId":"167","endLine":8,"endColumn":18},{"ruleId":"164","severity":1,"message":"170","line":13,"column":21,"nodeType":"166","messageId":"167","endLine":13,"endColumn":36},{"ruleId":"164","severity":1,"message":"171","line":26,"column":14,"nodeType":"166","messageId":"167","endLine":26,"endColumn":25},{"ruleId":"172","severity":1,"message":"173","line":36,"column":18,"nodeType":"174","endLine":36,"endColumn":54},{"ruleId":"160","replacedBy":"175"},{"ruleId":"162","replacedBy":"176"},{"ruleId":"164","severity":1,"message":"177","line":27,"column":10,"nodeType":"166","messageId":"167","endLine":27,"endColumn":31},{"ruleId":"164","severity":1,"message":"178","line":28,"column":12,"nodeType":"166","messageId":"167","endLine":28,"endColumn":35},{"ruleId":"164","severity":1,"message":"179","line":10,"column":20,"nodeType":"166","messageId":"167","endLine":10,"endColumn":29},{"ruleId":"164","severity":1,"message":"180","line":56,"column":9,"nodeType":"166","messageId":"167","endLine":56,"endColumn":14},{"ruleId":"172","severity":1,"message":"181","line":140,"column":6,"nodeType":"182","endLine":140,"endColumn":33,"suggestions":"183"},{"ruleId":"160","replacedBy":"184"},{"ruleId":"162","replacedBy":"185"},{"ruleId":"172","severity":1,"message":"186","line":350,"column":6,"nodeType":"182","endLine":350,"endColumn":29,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setUserData' is assigned a value but never used.","'Redirect' is defined but never used.","'updatePathArray' is assigned a value but never used.","'arrayEquals' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'details' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal",["188"],["189"],"'requiredFileAndFolder' is assigned a value but never used.","'changeFileAndFolderData' is assigned a value but never used.","'useParams' is defined but never used.","'found' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fileAndFolderData.count', 'message.display', 'message.type', and 'setMessage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'changeFileAndFolderData' needs the current value of 'fileAndFolderData.count'.","ArrayExpression",["190"],["188"],["189"],"React Hook React.useLayoutEffect has missing dependencies: 'FolderArray', 'NpreviousFolders', 'fileAndFolder', 'previousFolders', and 'updateSelected'. Either include them or remove the dependency array.",["191"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [fileAndFolderData.count, fileAndFolderData.loading, message.display, message.type, setMessage]",{"range":"196","text":"197"},"Update the dependencies array to be: [FolderArray, NpreviousFolders, fileAndFolder, previousFolders, requiredFileAndFolder, updateSelected]",{"range":"198","text":"199"},[4084,4111],"[fileAndFolderData.count, fileAndFolderData.loading, message.display, message.type, setMessage]",[10737,10760],"[FolderArray, NpreviousFolders, fileAndFolder, previousFolders, requiredFileAndFolder, updateSelected]"]